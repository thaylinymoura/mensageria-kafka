spring.application.name=inventory-service
# Porta do servidor
server.port=8080

# URL de conexão JDBC (substitua 'meu_banco' pelo nome do seu schema)
spring.datasource.url=jdbc:mysql://localhost:3306/Produtos?useSSL=false&serverTimezone=UTC

# Credenciais de acesso
spring.datasource.username=root
spring.datasource.password=sua_nova_senha_aqui

##############################################
# JPA / Hibernate (opcional)
##############################################

# Atualiza o esquema automaticamente (nenhum | validate | update | create | create-drop)
spring.jpa.hibernate.ddl-auto=none

# Exibe as queries SQL no console
spring.jpa.show-sql=true



# Servidores Kafka
spring.kafka.bootstrap-servers=localhost:9092

# consumer (recebe de mensagens)

group-id: inventory-group # ID do grupo de consumidores para este serviço
auto-offset-reset: earliest # Começa a ler do início do tópico se não houver offset salvo
key-deserializer: org.apache.kafka.common.serialization.StringDeserializer

# Usaremos um Deserializer JSON customizado para o valor

value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer

producer:
key-serializer: org.apache.kafka.common.serialization.StringSerializer

# Usaremos um Serializer JSON para enviar o evento de resposta
value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
